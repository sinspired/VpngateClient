[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "console",
        "description": "console",
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "VPN",
        "kind": 6,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "class VPN:\n    \"\"\"A VPN server.\"\"\"\n    def __init__(self, data, args):\n        # Command Line Arguments\n        self.args = args\n        # Logging\n        self.log = logging.getLogger(\"VPN: %s\" % data[\"#HostName\"])\n        # VPN Information\n        self.ip = data[\"IP\"]\n        self.country = data[\"CountryLong\"]",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "FileVPN",
        "kind": 6,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "class FileVPN(VPN):\n    \"\"\"A VPN whose config is read directly from an .openvpn file\"\"\"\n    def __init__(self, args):\n        conf = args.ovpnfile.read()\n        b64conf = base64.b64encode(conf)\n        data = {\n            \"IP\": None,\n            \"CountryLong\": \"Unknown\",\n            \"CountryShort\": \"Unknown\",\n            \"#HostName\": args.ovpnfile.name,",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "VPNList",
        "kind": 6,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "class VPNList:\n    def __init__(self, args):\n        print(\n            \"\\033[2J\\033[H\\033[32m[VPNGATE-CLIENT] for Windows, Start running...\\033[0m\"\n        )\n        self.args = args\n        # Setup logging\n        self.log = logging.getLogger(\"VPNList\")\n        # Check if the local CSV file exists and is not expired\n        self.local_csv_path = LOCAL_CSV_PATH",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "speedtest",
        "kind": 2,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "def speedtest():\n    \"\"\"Performs a speedtest printing connection speeds in kb/s.\"\"\"\n    url = SPEED_TEST_URL\n    match = re.search(r\"(\\d+)MB\", url)\n    FILESIZE = float(match.group(1))\n    chunk_size = 4096  # 每次读取的块大小，单位为字节\n    duration = 5  # 测试持续时间，单位为秒\n    timeout = 20  # 请求超时时间，单位为秒\n    headers = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "parse_args",
        "kind": 2,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "def parse_args():\n    \"\"\"Parses the command line arguments.\"\"\"\n    p = argparse.ArgumentParser(description=\"Client for vpngate.net VPNs\")\n    p.add_argument(\n        \"--country\",\n        \"-c\",\n        action=\"append\",\n        help=\"A 2 char country code (e.g. CA for Canada) from \"\n        + \"which to look for a VPNs. If specified multiple \"\n        + \"times, VPNs from all the countries will be selected.\",",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "single_vpn_main",
        "kind": 2,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "def single_vpn_main(args):\n    \"\"\"Connects to the VPN is the given .ovpn file.\"\"\"\n    vpn = FileVPN(args)\n    try:\n        vpn.connect()\n    except KeyboardInterrupt:\n        logging.error(\"Aborted\")\ndef vpn_list_main(args):\n    \"\"\"Fetches list of VPNs and connects to them.\"\"\"\n    vpnlist = VPNList(args)",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "vpn_list_main",
        "kind": 2,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "def vpn_list_main(args):\n    \"\"\"Fetches list of VPNs and connects to them.\"\"\"\n    vpnlist = VPNList(args)\n    indexNum = 0\n    total = len(vpnlist.vpns)\n    # Connect to them one-by-one and let the user decide which one to use.\n    for vpn in vpnlist.vpns:\n        indexNum = indexNum + 1\n        print(\n            \"\\033[90m-----------------------------------------------------------+\\33[0m\"",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "isAdmin",
        "kind": 2,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "def isAdmin():\n    try:\n        return ctypes.windll.shell32.IsUserAnAdmin()\n    except:\n        return False\ndef addOpenVPNtoSysPath():\n    # OpenVPN bin 目录路径\n    openvpn_bin_path = r\"C:\\Program Files\\OpenVPN\\bin\"\n    # 检查目录是否存在\n    if os.path.exists(openvpn_bin_path):",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "addOpenVPNtoSysPath",
        "kind": 2,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "def addOpenVPNtoSysPath():\n    # OpenVPN bin 目录路径\n    openvpn_bin_path = r\"C:\\Program Files\\OpenVPN\\bin\"\n    # 检查目录是否存在\n    if os.path.exists(openvpn_bin_path):\n        # 获取当前环境变量 PATH\n        current_path = os.environ.get(\"PATH\", \"\")\n        # 检查 bin 目录是否在 PATH 中\n        if openvpn_bin_path not in current_path:\n            # 将 bin 目录添加到 PATH",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "def main():\n    args = parse_args()\n    # Check if OpenVPN is installed\n    if not shutil.which(\"openvpn\"):\n        # Check if OpenVPN BIN is added to PATH\n        addOpenVPNtoSysPath()\n        if not shutil.which(\"openvpn\"):\n            print(\n                \"\\033[31mOpenVPN is not installed on this system or added in system PATH.\\033[0m\"\n            )",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "VPN_LIST_URL",
        "kind": 5,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "VPN_LIST_URL = \"https://www.vpngate.net/api/iphone/\"\nSPEED_TEST_URL = \"http://ipv4.download.thinkbroadband.com/100MB.zip\"\nLOCAL_CSV_PATH = \"servers.csv\"\n# LOCAL_CSV_PATH = \"list.csv\"\nDEFAULT_EXPIRED_TIME = 8\n# Support Ansi\nconsole.ansi_capable\nlogger = logging.getLogger()\nEU_COUNTRIES = [\n    \"AL\",",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "SPEED_TEST_URL",
        "kind": 5,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "SPEED_TEST_URL = \"http://ipv4.download.thinkbroadband.com/100MB.zip\"\nLOCAL_CSV_PATH = \"servers.csv\"\n# LOCAL_CSV_PATH = \"list.csv\"\nDEFAULT_EXPIRED_TIME = 8\n# Support Ansi\nconsole.ansi_capable\nlogger = logging.getLogger()\nEU_COUNTRIES = [\n    \"AL\",\n    \"AT\",",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "LOCAL_CSV_PATH",
        "kind": 5,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "LOCAL_CSV_PATH = \"servers.csv\"\n# LOCAL_CSV_PATH = \"list.csv\"\nDEFAULT_EXPIRED_TIME = 8\n# Support Ansi\nconsole.ansi_capable\nlogger = logging.getLogger()\nEU_COUNTRIES = [\n    \"AL\",\n    \"AT\",\n    \"BA\",",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "DEFAULT_EXPIRED_TIME",
        "kind": 5,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "DEFAULT_EXPIRED_TIME = 8\n# Support Ansi\nconsole.ansi_capable\nlogger = logging.getLogger()\nEU_COUNTRIES = [\n    \"AL\",\n    \"AT\",\n    \"BA\",\n    \"BE\",\n    \"BG\",",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "logger = logging.getLogger()\nEU_COUNTRIES = [\n    \"AL\",\n    \"AT\",\n    \"BA\",\n    \"BE\",\n    \"BG\",\n    \"CH\",\n    \"CY\",\n    \"DE\",",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    },
    {
        "label": "EU_COUNTRIES",
        "kind": 5,
        "importPath": "VpngateClient.VpngateClient",
        "description": "VpngateClient.VpngateClient",
        "peekOfCode": "EU_COUNTRIES = [\n    \"AL\",\n    \"AT\",\n    \"BA\",\n    \"BE\",\n    \"BG\",\n    \"CH\",\n    \"CY\",\n    \"DE\",\n    \"DK\",",
        "detail": "VpngateClient.VpngateClient",
        "documentation": {}
    }
]